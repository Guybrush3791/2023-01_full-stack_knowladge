{
	"nodes":[
		{"id":"34c57622b515952e","x":-950,"y":54,"width":2227,"height":1276,"type":"group","label":"Database"},
		{"id":"e1c2b9e166ca03d8","x":-886,"y":100,"width":907,"height":1182,"type":"text","text":"## Creazione tabella in DB\nCreare *DB* all'inteno di `PHPMyAdmin`\n![[Pasted image 20230206113729.png]]\n\nCollegare il *database* definendo i campi relativi all'interno del file `.env`\n```properties\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=laravel-crud-completa\nDB_USERNAME=root\nDB_PASSWORD=code\n```\n\nCreare `migration` attraverso il comando `artisan`\n```sh\nphp artisan make:migration create_tasks_table\n```\n\nDefinire colonne e vincoli di integrita' all'interno della `migration`\n```php\npublic function up()\n{\n\tSchema::create('tasks', function (Blueprint $table) {\n\t\t\n\t\t$table -> id();\n\t\t\n\t\t$table -> string('name', 32);\n\t\t$table -> text('description') -> nullable();\n\t\t$table -> integer('priority') -> unsigned();\n\t\t\n\t\t$table -> timestamps();\n\t});\n}\n```\n\nTestare la `migration` da riga di comando verificando che in `PHPMyAdmin` la tabella venga creata correttamente\n```sh\nphp artisan migrate:refresh\n\n   WARN  Migration table not found.  \n\n   INFO  Preparing database.  \n\n  Creating migration table .................... 18ms DONE\n\n   INFO  Running migrations.  \n\n  2014_10_12_000000_create_users_table ........ 27ms DONE\n  2014_10_12_100000_create_password_resets_table  31ms DONE\n  2019_08_19_000000_create_failed_jobs_table .. 18ms DONE\n  2019_12_14_000001_create_personal_access_tokens_table  35ms DONE\n  2023_02_06_103057_create_tasks_table ........ 11ms DONE\n```\n![[Pasted image 20230206113938.png]]"},
		{"id":"5021fccc39f6da00","x":297,"y":100,"width":907,"height":1182,"type":"text","text":"## [OPTIONAL] Inserimento dati fake all'interno della tabella\nCreare la tripletta di `model`,`factory` e `seeder` per la nuova tabella appena creata\n```sh\nphp artisan make:model Task\nphp artisan make:factory TaskFactory\nphp artisan make:seeder TaskSeeder\n```\n\nCreare una mappa tra ogni *colonna* della tabella e una funzione del *faker* all'interno del file `fatory` avendo cura di dare un senso a tutti i vincoli di integrita'\n```php\npublic function definition()\n{\n\treturn [\n\t\t'name' => fake() -> words(3, true),\n\t\t'description' => fake() -> boolean() \n\t\t\t\t\t\t ? fake() -> paragraph()\n\t\t\t\t\t\t : '',\n\t\t'priority' => fake() -> numberBetween(0, 10),\n\t];\n}\n```\n\nImportare il `model` all'interno del `seeder` per poi richiamarlo per creare `100` entita' *casuali* all'interno del *DB*\n```php\nuse App\\Models\\Task;\n\nclass TaskSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        Task::factory() -> count(100) -> create();\n    }\n}\n```\n\nCompletare il file `DatabaseSeeder.php` richiamando il `seeder` appena creato\n```php\npublic function run()\n{\n\t$this -> call([\n\t\tTaskSeeder::class,\n\t]);\n}\n```\n\nLanciare infine l'esecuzione del `seeder` tramite il comando `artisan`\n```sh\nphp artisan db:seed\n```\n\n*N.B.*: all'occorrenza puo' essere necessario rilanciare anche il `refresh` per la rigenerazione di nuove tabelle vuote"},
		{"id":"407861f156e6418d","x":-370,"y":-811,"width":1072,"height":731,"type":"group","label":"INIT progetto"},
		{"id":"1cce04c91ce88697","x":-297,"y":-777,"width":907,"height":653,"type":"text","text":"## Creazione progetto\nCreare progetto da terminale\n```sh\ncomposer create-project laravel/laravel laravel-crud-completa\ncomposer require pacificdev/laravel_9_preset\nphp artisan preset:ui bootstrap\n```\n\nDopo aver aperto altri 2 terminali in *VS Code* lanciare gli script per l'esecuzione del progetto\n- terminale 1\n```sh\nphp artisan serve\n```\n- terminale 2\n```sh\nnpm i ; npm run dev\n```\n- terminale 3\n\t*verra' utilizzato per i successivi comandi*"},
		{"id":"7aede56983952169","x":-950,"y":1496,"width":2227,"height":1276,"type":"group","label":"Scaffolding HTML + BACK-END"},
		{"id":"990bacfb0bb3a02b","x":-886,"y":1571,"width":907,"height":1124,"type":"text","text":"## Creazione HTML (Blade)\nCreare il solito *ecosistema* per la strutturazione di pagine in *Blade* all'interno della cartella `resources\\views`\n![[Pasted image 20230206120920.png]]\n\n### `components\\errors.blade.php`\n```php\n@if ($errors->any())\n<div class=\"alert alert-danger\">\n    <ul>\n        @foreach ($errors->all() as $error)\n            <li>{{ $error }}</li>\n        @endforeach\n    </ul>\n</div>\n@endif\n```\n\n### `components\\footer.blade.php`\n```php\n<h1>FOOTER</h1>\n```\n### `components\\header.blade.php`\n```php\n<h1>HEADER</h1>\n```\n### `layouts\\main-layout.blade.php`\n```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>CRUD COMPLETA</title>\n\n    @vite('resources/js/app.js')\n    @yield('head')\n\n</head>\n<body>\n    \n    @include('components.header')\n    @include('components.errors')\n\n    @yield('content')\n\n    @include('components.footer')\n    \n</body>\n</html>\n```\n### `pages\\home.blade.php`\n```php\n@extends('layouts.main-layout')\n\n@section('content')\n    \n    <h1>CONTENT</h1>\n\n@endsection\n```"},
		{"id":"4f389d20f6a8a9e8","x":-2270,"y":3010,"width":4867,"height":2760,"type":"group","label":"Operazioni di CRUD"},
		{"id":"19d3350854727cd8","x":-265,"y":3072,"width":907,"height":1027,"type":"text","text":"## Rotta `index`: tutte le entita' della tabella\nPer stampare tutti gli elementi presenti nella `tabella` del *DB* e' sufficiente andare a recuperare i dati dal `model` (dopo averlo importato tramite `use`) per poi farli arrivare all'`HTML`\n```php\nuse App\\Models\\Task;\n\nclass MainController extends Controller\n{\n    \n    public function home() {\n\n        $tasks = Task :: all();\n\n        // $data = [\n        //     'tasks' => $tasks\n        // ];\n\n        return view('pages.home', compact('tasks'));\n    }\n}\n```\n\nLa variabile `tasks` sara' ora disponibile al *front-end* per la rappresentazione dei dati tramite `HTML`\n```php\n@extends('layouts.main-layout')\n\n@section('content')\n    \n    <h1>Tasks</h1>\n    <ul>\n        @foreach ($tasks as $task)\n            <li>{{ $task -> name }}</li>\n        @endforeach\n    </ul>\n\n@endsection\n```"},
		{"id":"9f707857d0a7f875","x":-886,"y":4574,"width":907,"height":1088,"type":"text","text":"## Rotta `delete`: eliminazione entita'\nAd ogni *entita'* colleghiamo un `link` che permetta di eliminare l'entita' selezionata dall'utente\n\n### `web.php`: aggiungere rotta per la `delete`\n```php\nRoute :: get('/task/delete/{task}', [MainController :: class, 'taskDelete'])\n    -> name('task.delete');\n```\n\n### `MainController.php`: aggiungere metodo al `controller`\n```php\npublic function taskDelete(Task $task) {\n\n\t$task -> delete();\n\n\treturn redirect() -> route('home');\n}\n```\n\n### `home.blade.php`: collegare il tutto con un `link` nella `home`\n```php\n@extends('layouts.main-layout')\n\n@section('content')\n    \n    <h1>Tasks</h1>\n    <ul>\n        @foreach ($tasks as $task)\n            <li>\n                <a href=\"{{ route('task.show', $task) }}\">\n                    {{ $task -> name }}\n                </a>\n                -\n                <a href=\"{{ route('task.delete', $task) }}\">X</a>\n            </li>\n        @endforeach\n    </ul>\n\n@endsection\n```"},
		{"id":"c585f760e1f360ed","x":-2085,"y":4574,"width":907,"height":1088,"type":"text","text":"## Rotta `show`: dettagli dell'entita'\nAd ogni *entita'* colleghiamo un `link` che permetta di arrivare alla pagina che mostra i *dettagli dell'entita'* su cui l'utente ha cliccato\n\n### `web.php`: aggiungere nuova rotta per la `show`\n```php\nRoute :: get('/task/show/{task}', [MainController :: class, 'taskShow'])\n    -> name('task.show');\n```\n\n### `MainController.php`: aggiungere metodo al `controller`\n```php\npublic function taskShow(Task $task) {\n\n\treturn view('pages.taskShow', compact('task'));\n}\n```\n\n### `taskShow.blade.php`: creare nuova pagina `HTML`\n```php\n@extends('layouts.main-layout')\n\n@section('content')\n    \n    <h1>Task: {{ $task -> name }}</h1>\n    <h2>Priority: {{ $task -> priority }}/10</h2>\n    <span>\n        {{ \n            $task -> description \n            ? $task -> description \n            : \"- no description -\"\n        }}\n    </span>\n\n@endsection\n```\n\n### `home.blade.php`: collego il tutto con un `link` nella `home`\n```php\n@extends('layouts.main-layout')\n\n@section('content')\n    \n    <h1>Tasks</h1>\n    <ul>\n        @foreach ($tasks as $task)\n            <li>\n                <a href=\"{{ route('task.show', $task) }}\">\n                    {{ $task -> name }}\n                </a>\n            </li>\n        @endforeach\n    </ul>\n\n@endsection\n```"},
		{"id":"ba75e321643e5732","x":297,"y":4574,"width":907,"height":1088,"type":"text","text":"## Rotta `create` + `store`: creazione di nuova entita'\nPer creare una nuova entita' e' necesario definire *2* diverse rotte:\n1. la prima ritornera' il `form` che l'utente utilizzera' per inserire i dati\n2. la seconda riceve il contenuto del `form` (definito dall'*utente*) e, dopo aver *validato* i dati, salva *eventualmente* in *DB*\n\n### `web.php`: definire rotta per il `form`\n```php\nRoute :: get('/task/create', [MainController :: class, 'taskCreate'])\n    -> name('task.create');\n```\n\n### `MainController.php`: aggiungere metodo al `controller`\n```php\npublic function taskCreate() {\n\n\treturn view('pages.taskCreate');\n}\n```\n\n### `taskCreate.blade.php`: creare pagina `HTML`\n```php\n@extends('layouts.main-layout')\n\n@section('content')\n    \n    <h1>New task</h1>\n    <form method=\"POST\" action=\"{{ route('task.store') }}\">\n        @csrf\n        <label for=\"name\">Name</label>\n        <input type=\"text\" name=\"name\">\n        <br>\n        <label for=\"description\">Description</label>\n        <input type=\"text\" name=\"description\">\n        <br>\n        <label for=\"priority\">Priority</label>\n        <input type=\"text\" name=\"priority\">\n        <br>\n        <input type=\"submit\" value=\"CREATE NEW TASK\">\n    </form>\n\n@endsection\n```\n\n### `home.blade.php`: aggiungere link per raggiungere il `form`\n```php\n@extends('layouts.main-layout')\n\n@section('content')\n    \n    <h1>Tasks</h1>\n    <a href=\"{{ route('task.create') }}\">CREATE NEW TASK</a>\n    <ul>\n        @foreach ($tasks as $task)\n            <li>\n                <a href=\"{{ route('task.show', $task) }}\">\n                    {{ $task -> name }}\n                </a>\n                -\n                <a href=\"{{ route('task.delete', $task) }}\">X</a>\n            </li>\n        @endforeach\n    </ul>\n\n@endsection\n```\n\n---\n\n### `web.php`: aggiungere rotta per la ricezione dei dati dal `form`\n```php\nRoute :: post('/task/store', [MainController :: class, 'taskStore'])\n    -> name('task.store');\n```\n**N.B.**: occhio al metodo\n\n### `MainController.php`: aggiungere metodo per la ricezione dei dati dal `form` (con validazione)\n```php\npublic function taskStore(Request $request) {\n\n\t$data = $request -> validate([\n\t\t'name' => 'required|string|max:32',\n\t\t'description' => 'nullable|string',\n\t\t'priority' => 'required|integer|min:0|max:10',\n\t]);\n\n\t$task = new Task();\n\n\t$task -> name = $data['name'];\n\t$task -> description = $data['description'];\n\t$task -> priority = $data['priority'];\n\n\t$task -> save();\n\n\treturn redirect() -> route('home');\n}\n```"},
		{"id":"0878dc5a998f4d6a","x":1493,"y":4574,"width":907,"height":1088,"type":"text","text":"## Rotta `edit` + `update`: modifica entita'\nPer modificare un'entita' e' necesario definire *2* diverse rotte:\n1. la prima ritornera' il `form` che l'utente utilizzera' per inserire i dati (con i vecchi dati gia' presenti nei campi `input`)\n2. la seconda riceve il contenuto del `form` (definito dall'*utente*) e, dopo aver *validato* i dati, salva *eventualmente* in *DB*\n\n### `web.php`: definire rotta per il `form`\n```php\nRoute :: get('/task/edit/{task}', [MainController :: class, 'taskEdit'])\n    -> name('task.edit');\n```\n\n### `MainController.php`: aggiungere metodo al `controller`\n```php\npublic function taskEdit(Task $task) {\n\n\treturn view('pages.taskEdit', compact('task'));\n}\n```\n\n### `taskEdit.blade.php`: creare pagina `HTML`\n```php\n@extends('layouts.main-layout')\n\n@section('content')\n    \n    <h1>New task</h1>\n    <form method=\"POST\" action=\"{{ route('task.update', $task) }}\">\n        @csrf\n        <label for=\"name\">Name</label>\n        <input type=\"text\" name=\"name\" value={{ $task -> name }}>\n        <br>\n        <label for=\"description\">Description</label>\n        <input type=\"text\" name=\"description\" value={{ $task -> description }}>\n        <br>\n        <label for=\"priority\">Priority</label>\n        <input type=\"text\" name=\"priority\" value={{ $task -> priority }}>\n        <br>\n        <input type=\"submit\" value=\"UPDATE TASK\">\n    </form>\n\n@endsection\n```\n\n### `home.blade.php`: aggiungere link per raggiungere il `form`\n```php\n@extends('layouts.main-layout')\n\n@section('content')\n    \n    <h1>Tasks</h1>\n    <a href=\"{{ route('task.create') }}\">CREATE NEW TASK</a>\n    <ul>\n        @foreach ($tasks as $task)\n            <li>\n                <a href=\"{{ route('task.show', $task) }}\">\n                    {{ $task -> name }}\n                </a>\n                -\n                <a href=\"{{ route('task.edit', $task) }}\">\n                    EDIT\n                </a>\n                -\n                <a href=\"{{ route('task.delete', $task) }}\">X</a>\n            </li>\n        @endforeach\n    </ul>\n\n@endsection\n```\n\n---\n\n### `web.php`: aggiungere rotta per la ricezione dei dati dal `form`\n```php\nRoute :: post('/task/update/{task}', [MainController :: class, 'taskUpdate'])\n    -> name('task.update');\n```\n**N.B.**: occhio al metodo\n\n### `MainController.php`: aggiungere metodo per la ricezione dei dati dal `form` (con validazione)\n```php\npublic function taskUpdate(Request $request, Task $task) {\n\n\t$data = $request -> validate([\n\t\t'name' => 'required|string|max:32',\n\t\t'description' => 'nullable|string',\n\t\t'priority' => 'required|integer|min:0|max:10',\n\t]);\n\n\t$task -> name = $data['name'];\n\t$task -> description = $data['description'];\n\t$task -> priority = $data['priority'];\n\n\t$task -> save();\n\n\treturn redirect() -> route('home');\n}\n```"},
		{"id":"c27a260b07aba38b","x":297,"y":1685,"width":907,"height":897,"type":"text","text":"## Creazione scaffolding back-end\nCreare un `controller` tramite il comando `artisan`\n```sh\nphp artisan make:controller MainController\n```\n\nDefinire all'interno del `controller` un metodo di nome `home`\n```php\npublic function home() {\n\n\treturn view('pages.home');\n}\n```\n\nCollegare quel metodo all'interno del file di *rotte* `web.php`\n```php\nuse App\\Http\\Controllers\\MainController;\n\nRoute::get('/', [MainController :: class, 'home']);\n```\n\nTestare la visualizzazione della pagina `home` di prova\n![[Pasted image 20230206134150.png]]"}
	],
	"edges":[
		{"id":"1f5fb3661e4b8efd","fromNode":"e1c2b9e166ca03d8","fromSide":"right","toNode":"5021fccc39f6da00","toSide":"left"},
		{"id":"840a1ac9b2772f14","fromNode":"407861f156e6418d","fromSide":"bottom","toNode":"34c57622b515952e","toSide":"top"},
		{"id":"40537aa62649cfd0","fromNode":"7aede56983952169","fromSide":"bottom","toNode":"4f389d20f6a8a9e8","toSide":"top"},
		{"id":"75e3f7f6c6279c12","fromNode":"19d3350854727cd8","fromSide":"bottom","toNode":"9f707857d0a7f875","toSide":"top"},
		{"id":"b117f75941406a59","fromNode":"19d3350854727cd8","fromSide":"bottom","toNode":"ba75e321643e5732","toSide":"top"},
		{"id":"4db2503202580fe1","fromNode":"19d3350854727cd8","fromSide":"bottom","toNode":"c585f760e1f360ed","toSide":"top"},
		{"id":"5df09dd96476b571","fromNode":"34c57622b515952e","fromSide":"bottom","toNode":"7aede56983952169","toSide":"top"},
		{"id":"910fa2731c48e4fb","fromNode":"19d3350854727cd8","fromSide":"bottom","toNode":"0878dc5a998f4d6a","toSide":"top"}
	]
}